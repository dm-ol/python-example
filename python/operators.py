# Арифметичні оператори в Python

# +	Додавання
print(6 + 3)
# −	Віднімання
print(6 - 3)
# *	Множення
print(4 * 5)
# /	Ділення
print(8 / 4)
# // Цілочисельне ділення
print(10 // 3)
# %	Залишок від ділення
print(5 % 2)
# ** Піднесення до степеня
print(4 ** 2)


# Оператори присвоювання в Python

# =     Присвоювання
a = 4
# +=	Додавання з присвоюванням
a += 2  # a = a + 2
# −=	Віднімання з присвоюванням
a -= 4  # a = a − 4
# *=	Множення з присвоюванням
a *= 5  # a = a * 5
# /=	Ділення із присвоюванням
a /= 6  # a = a / 6
# %=	Залишок від ділення з присвоюванням
a %= 7  # a = a % 7
# **=	Піднесення до степеня з присвоюванням
a **= 8  # a = a ** 8

# Оператори порівняння в Python

# ==	Дорівнює
2 == 4  # False
# !=	Не дорівнює
2 != 5  # True
# >    	Більше ніж
2 > 4  # False
# <	    Менше ніж
2 < 4  # True
# >=	Більше або Дорівнює
2 >= 4  # False
# <=	Менше або Дорівнює
2 <= 4  # True

# Логічні оператори в Python

# Логічне І (and)
print(True and True)     # True
print(True and False)    # False

# Логічне АБО (or)
print(True or False)     # True

# Логічне НЕ (not). При використанні зі значенням False, отримаєм True і навпаки.
print(not True)          # False
print(not None)          # True
print(not ())       # True
print(not 10)       # False

# Логічне НЕ НЕ (not not). При використанні зі значенням True, отримаєм True. А з False отримаємо False.
print(not not True)          # True
print(not not None)          # False
print(not not ())       # False
print(not not 10)       # True


# Оператори тотожності в Python. В Python оператори is та is not використовуються для перевірки того,
# чи знаходяться два об’єкти в одній і тій же частині пам’яті. Дві однакові за значеннями змінні не завжди є ідентичними.

x1 = 4
y1 = 4
x2 = 'Hello'
y2 = 'Hello'
x3 = [1, 2, 3]
y3 = [1, 2, 3]

print(x1 is not y1)  # виведе False

print(x2 is y2)  # виведе True

print(x3 is y3)  # виведе False


# Оператори належності в Python. У Python оператори in та not in є операторами належності.
# Вони використовуються для перевірки того, чи знаходиться значення або змінна в
# послідовності (рядок, список, кортеж, набір або словник). В словнику ми можемо перевірити
# лише наявність ключа, але не значення.

x = 'Hello world'
y = {1: 'a', 2: 'b'}

# Перевіряємо, чи знаходиться 'H' у рядку x
print('H' in x)  # виведе True

# Перевіряємо, чи знаходиться 'hello' у рядку x
print('hello' not in x)  # виведе True

# Перевіряємо, чи є ключ '1' у словнику y
print(1 in y)  # виведе True

# Перевіряємо, чи є ключ 'a' у словнику y
print('a' in y)  # виведе False


# Побітові оператори в Python. Побітові оператори працюють з операндами,
# ніби вони є наборами двійкових цифр. Вони працюють з бітами, звідси й назва.
# Наприклад, десяткове 2 — це бінарне 10, а десяткове 7 — це бінарне 111.

# &	Побітове І	(and)
# |	Побітове АБО	(or)
# ~	Побітове НЕ	    (not)
# ^	Побітове XOR	(xor)
# >>	Побітовий зсув вправо
# <<	Побітовий зсув вліво
