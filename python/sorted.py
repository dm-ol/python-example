# Функція sorted() сортує елементи вказаного ітерованого об’єкта в
# певному порядку (за зростанням або за спаданням) і повертає їх у вигляді списку.

numbers = [4, 2, 12, 8]

sorted_numbers = sorted(numbers)
print(sorted_numbers)

# Функція sorted() може приймати максимум три параметри:
#    iterable — послідовність (рядок, кортеж, список) або колекція (множина, словник, заморожена множина) або будь-який інший ітератор;
#    key (не обов’язково) — функція, яка є ключем для виконання сортування. За замовчуванням використовується None;
#    reverse (не обов’язково) — якщо значення дорівнює True, то відсортований список буде “зворотним” (або відсортованим за спаданням). За замовчуванням використовується значення False.

# Сортування списку, рядку та кортежу

# Список голосних
py_list = ['e', 'a', 'u', 'o', 'i']
print(sorted(py_list))

# Рядок
py_string = 'Python'
print(sorted(py_string))

# Кортеж голосних
py_tuple = ('e', 'a', 'u', 'o', 'i')
print(sorted(py_tuple))

# Сортування у порядку спадання
# Функція sorted() приймає параметр reverse як необов’язковий аргумент.
# Установка reverse = True сортує ітерований об’єкт в порядку спадання.

# Множина
py_set = {'e', 'a', 'u', 'o', 'i'}
print(sorted(py_set, reverse=True))

# Словник
py_dict = {'e': 1, 'a': 2, 'u': 3, 'o': 4, 'i': 5}
print(sorted(py_dict, reverse=True))

# Заморожена множина
frozen_set = frozenset(('e', 'a', 'u', 'o', 'i'))
print(sorted(frozen_set, reverse=True))


# Параметр key в функції sorted() в Python
# Якщо потрібна власна реалізація сортування, то функція sorted() приймає функцію key як необов’язковий параметр.
# На основі поверненого значення key ми можемо відсортувати вказаний ітерований об’єкт.

# sorted(iterable, key=len)
# Тут len() — це вбудована функція в Python для обчислення довжини об’єкта. Список сортується в залежності від довжини елемента, від найменшого значення до найбільшого.

# Сортування списку за допомогою функції sorted(), яка має функцію key

# Беремо другий елемент для сортування
def take_second(elem):
    return elem[1]


# Випадковий список
random = [(2, 2), (3, 4), (4, 1), (1, 3)]

# Сортуємо список за допомогою параметра key
sorted_list = sorted(random, key=take_second)

# Виводимо список
print('Sorted list:', sorted_list)


# Сортування з кількома ключами

# Вкладений список інформації про студентів.
# Елементи списку: (Ім'я студента, Оцінка зі 100, Вік)

participant_list = [
    ('Alison', 50, 18),
    ('Terence', 75, 22),
    ('David', 75, 20),
    ('Jimmy', 90, 22),
    ('John', 45, 22)
]

# Ми хочемо відсортувати список таким чином, щоб студенти з високими оцінками були на початку.
# Якщо у студентів однакові оцінки, їх необхідно відсортувати так, щоб молодший учасник виявився першим.
# Ми можемо досягти такого типу сортування з кількома ключами, повертаючи кортеж замість числа.
# Два кортежі можна порівняти, починаючи з першого елемента. Якщо елементи рівні, порівнюється другий елемент і так далі.

# >> > (1, 3) > (1, 4)
# False
# >> > (1, 4) < (2, 2)
# True
# >> > (1, 4, 1) < (2, 1)
# True

# Скористаємося цією логікою для побудови нашої логіки сортування:

# Вкладений список інформації про студентів.
# Елементи списку: (Ім'я студента, Оцінка зі 100, Вік)
participant_list = [
    ('Alison', 50, 18),
    ('Terence', 75, 22),
    ('David', 75, 20),
    ('Jimmy', 90, 22),
    ('John', 45, 22)
]


def sorter(item):
    error = 100 - item[1]
    age = item[2]
    return (error, age)


sorted_list = sorted(participant_list, key=sorter)
print(sorted_list)
