# Python — це універсальна мова програмування, яка підтримує різні парадигми програмування,
# включаючи об’єктно-орієнтоване програмування (скор. “ООП”) з використанням об’єктів та класів.
# Об’єкт — це будь-яка сутність, яка має атрибути (дані) та поведінку (методи/функції). Наприклад, кошеня — це об’єкт. В нього є:
#    атрибути — ім’я, вік, колір тощо.
#    поведінка — бігає, нявкає, спить і т.д.
# Клас — це креслення (план) цього об’єкта.

# Клас та об’єкти в Python

class Cat:
    # Атрибути (дані) класу
    name = ""
    age = 0


# Створення об'єкта cat1
cat1 = Cat()
cat1.name = "Blu"
cat1.age = 10

# Створення іншого об'єкта — cat2
cat2 = Parrot()
cat2.name = "Woo"
cat2.age = 15

# Доступ до атрибутів класу Cat
print(f"{cat1.name} is {cat1.age} years old")
print(f"{cat2.name} is {cat2.age} years old")

# Ми створили клас Cat з двома атрибутами: name та age.
# Потім ми створили екземпляри (об’єкти) класу Cat: cat1 та cat2 — це посилання на наші нові об’єкти.
# Ми звертаємось до атрибутів екземплярів та присвоюємо їм значення, використовуючи ім’я екземпляра та оператор .

# Спадкування — це спосіб створення нового класу, використовуючи дані вже існуючого класу без внесення змін до нього.
# Створюваний клас є дочірнім (або “похідним”) класом, а існуючий клас є батьківським (або “базовим”) класом.

# Батьківський клас


class Animal:

    def eat(self):
        print("I can eat!")

    def sleep(self):
        print("I can sleep!")

# Дочірній клас


class Dog(Animal):

    def bark(self):
        print("I can bark! Woof woof!!")


# Створюємо об'єкт класу Dog
dog1 = Dog()

# Викликаємо методи батьківського класу
dog1.eat()
dog1.sleep()

# Викликаємо метод дочірнього класу
dog1.bark()
