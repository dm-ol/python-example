# Визначення класу в Python
# Для створення класу в Python використовується ключове слово class:
# Тут ми створили клас з ім’ям ClassName.

class ClassName:
    # Визначення класу


class Bike:
    name = ""
    gear = 0
# Тут:
    #    Bike – назва класу;
    #    name та gear — змінні всередині класу.

# Об’єкт — це екземпляр класу. Наприклад, Bike — це клас і ми можемо створити об’єкти типу bike1, bike2 з цього класу.

# Синтаксис створення об’єктів класу в Python:


objectName = ClassName()

# Розглянемо приклад:

# Створюємо клас


class Bike:
    name = ""
    gear = 0


# Створюємо об'єкт класу
bike1 = Bike()
# Тут bike1 — це об’єкт класу Bike. Ми можемо використовувати цей об’єкт для доступу до атрибутів (даних) класу Bike.

# Доступ до атрибутів класу через об’єкти
# Оператор . використовується для доступу до атрибутів класу. Наприклад:

# Змінюємо атрибут name об'єкта bike1
bike1.name = "Mountain Bike"

# Отримуємо доступ до атрибута gear об'єкта bike1
bike1.gear
# Тут ми використали bike1.name та bike1.gear для доступу та зміни значень атрибутів name та gear.

# Створюємо клас


class Bike:
    name = ""
    gear = 0


# Створюємо об'єкт класу
bike1 = Bike()

# Отримуємо доступ до атрибутів об'єкта та присвоюємо нові значення
bike1.gear = 11
bike1.name = "Mountain Bike"

# Виводимо дані об'єкта на екран
print(f"Name: {bike1.name}, Gears: {bike1.gear} ")


# Створення кількох об’єктів одного класу
# Ми можемо створити багато об’єктів одного класу. Наприклад:

# Створюємо клас
class Employee:
    # Визначаємо атрибут
    employee_id = 0


# Створюємо два об'єкти класу Employee
employee1 = Employee()
employee2 = Employee()

# Отримуємо доступ до атрибутів об'єкта employee1 та присвоюємо нове значення
employee1.employeeID = 1001
print(f"Employee ID: {employee1.employeeID}")

# Отримуємо доступ до атрибутів об'єкта employee2 та присвоюємо нове значення
employee2.employeeID = 1002
print(f"Employee ID: {employee2.employeeID}")


# Функція, визначена всередині класу, називається методом.
# Тут ми створили клас Room з атрибутами: length та width; та методом calculate_area().
# Потім ми створили об’єкт study_room класу Room та використали цей об’єкт для присвоєння
# значень атрибутам length та width. Зверніть увагу, що ми також використали цей об’єкт
# для виклику методу всередині класу за допомогою оператора

# Створюємо клас
class Room:
    length = 0.0
    width = 0.0

    # Метод обчислення площі
    def calculate_area(self):
        print("Area of Room =", self.length * self.width)


# Створюємо об'єкт класу Room
study_room = Room()

# Надаємо нові значення всім атрибутам об'єкта
study_room.length = 42.5
study_room.width = 30.8

# Отримуємо доступ до методу всередині класу
study_room.calculate_area()


# Конструктори в Python
# Раніше ми присвоїли значення за замовчуванням атрибуту name класу Bike:

class Bike:
    name = ""


...

# Створюємо об'єкт класу
bike1 = Bike()

# Однак, ми також можемо ініціалізувати значення за допомогою конструкторів. Наприклад:


class Bike:
    # Функція-конструктор
    def __init__(self, name=""):
        self.name = name


bike1 = Bike()

# Тут __init__() – це функція-конструктор, яка викликається щоразу, коли створюється новий об’єкт цього класу.
# Конструктор ініціалізує значення атрибута name. Ми використали self.name, щоб посилатися на атрибут name об’єкта bike1.
# Якщо ми використовуємо конструктор для ініціалізації значень всередині класу,
# нам необхідно передати відповідне значення під час створення об’єкта класу:

bike1 = Bike("Mountain Bike")

# Тут "Mountain Bike" передається як аргумент name функції __init__() (яка є конструктором класу Bike) для ініціалізації атрибута name.


# Клас – це ідея (більш-менш абстрактна), яка може бути використана для створення ряду втілень – таке втілення називається об’єктом .


# 2. Коли клас є похідним від іншого класу, їх зв’язок називається успадкуванням . Клас, який походить від іншого класу, називається підкласом . Друга сторона цього відношення називається суперкласом . Спосіб представлення такого відношення — діаграма успадкування , де:

# суперкласи завжди представлені над своїми підкласами;
# зв'язки між класами показані стрілками, спрямованими від підкласу до його суперкласу .

# 3. Об'єкти оснащені:

# назва , яка ідентифікує їх і дозволяє нам розрізняти їх;
# набір властивостей (набір може бути порожнім)
# набір методів (також може бути порожнім)

# 4. Щоб визначити клас Python, вам потрібно використовувати class ключове слово. Наприклад:


class This_Is_A_Class:
    pass


# 5. Щоб створити об’єкт попередньо визначеного класу, необхідно використовувати клас як функцію. Наприклад:


this_is_an_object = This_Is_A_Class()
