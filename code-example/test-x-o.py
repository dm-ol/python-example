# Ваше завдання — написати просту програму, яка ніби грає з користувачем у хрестики-нулики.
# Щоб вам було легше, ми вирішили спростити гру. Ось наші припущення:
# комп'ютер (тобто ваша програма) має грати в гру за 'X';
# користувач (наприклад, ви) має грати в гру, використовуючи 'O';
# перший хід належить комп’ютеру − він завжди ставить свій перший 'X' посередині дошки;
# усі квадрати пронумеровані послідовно рядок за рядком, починаючи з 1 (для довідки перегляньте приклад нижче)
# користувач робить свій хід, вводячи номер вибраного ним квадрата − число має бути дійсним,
# тобто воно повинно бути цілим та бути більше 0 і менше 10, також не можна вказувати на квадрат, який вже зайнятий;
# програма перевіряє, чи закінчилася гра − є чотири можливих вердикти: гра має продовжуватися,
# гра закінчується нічиєю, ви виграли або виграв комп’ютер;
# комп'ютер відповідає своїм ходом і перевірка повторюється
from random import randrange


def display_board(board):  # Малюємо дошку і відслідковуємо зміни
    print("+-------" * 3, "+", sep="")  # Відображення верхнього рядка дошки
    for row in range(3):
        # Відображення розділювача між рядками
        print("|       " * 3, "|", sep="")
        for col in range(3):
            # Відображення значень клітинок
            print("|   " + str(board[row][col]) + "   ", end="")
        print("|")  # Відображення вертикальної лінії в кінці рядка
        # Відображення розділювача між рядками
        print("|       " * 3, "|", sep="")
        print("+-------" * 3, "+", sep="")  # Відображення нижнього рядка дошки


def enter_move(board):
    while True:  # Нескінченний цикл для введення ходу, доки не буде виконано вираз "break"
        # Запит користувача на введення ходу
        move = input("Введіть свій хід: ")
        # Перевірка, чи введений рядок складається лише з цифр і чи він знаходиться в діапазоні від 1 до 9
        if move.isdigit() and 1 <= int(move) <= 9:
            # Переведення номеру клітинки (від 1 до 9) у внутрішнє представлення (від 0 до 8)
            move = int(move) - 1
            # Отримання рядка і стовпця на основі номеру клітинки
            row, col = divmod(move, 3)
            if board[row][col] not in ['O', 'X']:  # Перевірка, чи обрана клітинка вільна
                # Заповнення вибраної клітинки символом "O"
                board[row][col] = 'O'
                break  # Вихід із циклу, якщо хід було здійснено успішно
            else:
                # Повідомлення про те, що вибрана клітинка вже зайнята
                print("Поле вже зайнято - повторіть введення!")
        else:
            # Повідомлення про невдалу спробу введення ходу
            print("Невдалий хід - повторіть введення даних!")


# Повертає список вільних клітинок на дошці.
def make_list_of_free_fields(board):
    # Вона перебирає всі клітинки і додає їх координати у випадку, якщо вони не містять "X" або "O".
    free = []  # список спочатку пустий
    for row in range(3):  # перебираємо рядки
        for col in range(3):  # перебираємо стовпчики
            if board[row][col] not in ['O', 'X']:  # чи вільна клітинка?
                free.append((row, col))  # так, це додає новий кортеж до списку
    return free


# Перевіряє, чи є переможець у грі. Переможець визначається за допомогою символу "X" або "O".
def victory_for(board, sgn):
    # Вона перевіряє всі рядки, стовпці та діагоналі на наявність трьох однакових символів, які відповідають символу sgn.
    # Якщо переможець знайдений, повертається 'me' (якщо символ 'X') або 'you' (якщо символ 'O'). Якщо переможця немає, повертається None.
    if sgn == "X":  # ми шукаємо Х?
        who = 'me'  # так - це бік комп'ютера
    elif sgn == "O":  # ... чи це O?
        who = 'you'  # так - це наш бік
    else:
        who = None  # ми не повинні попасти сюди!
    cross1 = cross2 = True  # для діагоналей
    for rc in range(3):
        if board[rc][0] == sgn and board[rc][1] == sgn and board[rc][2] == sgn:  # перевірка рядка rc
            return who
        if board[0][rc] == sgn and board[1][rc] == sgn and board[2][rc] == sgn:  # перевірка стовпця rc
            return who
        if board[rc][rc] != sgn:  # перевірка 1-ої діагоналі
            cross1 = False
        if board[2 - rc][2 - rc] != sgn:  # перевірка 2-ої діагоналі
            cross2 = False
    if cross1 or cross2:
        return who
    return None


# Функція відповідає за хід комп'ютера. Вона отримує список вільних клітинок, вибирає випадкову клітинку і заповнює її символом "X".
def draw_move(board):
    free = make_list_of_free_fields(board)  # створюємо список вільних клітинок
    cnt = len(free)
    if cnt > 0:  # якщо список не порожній, вибераємо місце для 'X' і впишемо його
        this = randrange(cnt)
        row, col = free[this]
        board[row][col] = 'X'


board = [[3 * j + i + 1 for i in range(3)] for j in range(3)]  # очистити дошку
board[1][1] = 'X'  # спочатку вписуємо 'X' посередині
free = make_list_of_free_fields(board)
human_turn = True  # чія черга ходити?
while len(free):
    display_board(board)
    if human_turn:
        enter_move(board)
        victor = victory_for(board, 'O')
    else:
        draw_move(board)
        victor = victory_for(board, 'X')
    if victor != None:
        break
    human_turn = not human_turn
    free = make_list_of_free_fields(board)

display_board(board)
if victor == 'you':
    print("Ви виграли!")
elif victor == 'me':
    print("Я виграв")
else:
    print("Нічия́!")
