# У 1937 році німецький математик Лотар Коллац сформулював інтригуючу гіпотезу (вона досі залишається недоведеною),
# яку можна сформулювати наступним чином:
# візьмемо довільне ціле невід'ємне та ненульове число і позначимо його c0;
# якщо воно парне, то обчислимо нове значення c0 як c0 ÷ 2;
# інакше, якщо воно непарне, обчислимо нове c0 як 3 × c0 + 1;
# якщо c0 ≠ 1, повертаємось до пункту 2.
# Гіпотеза стверджує, що незалежно від початкового значення c0, воно завжди буде дорівнювати 1.
# Звичайно, використовувати комп'ютер для доведення гіпотези для будь-якого натурального числа
# надзвичайно складне завдання (для цього може знадобитися навіть штучний інтелект),
# але для перевірки деяких окремих чисел можна застосувати мову програмування Python.
# Можливо, ви навіть знайдете таке, що спростує цю гіпотезу.
# Напишіть програму, яка зчитує одне натуральне число і виконує описані вище дії до тих пір,
# поки c0 відрізняється від 1. Ми також хочемо, щоб ви рахували кроки, необхідні для
# досягнення мети. Ваш код також повинен виводити всі проміжні значення c0.
try:
    c0 = int(input("Введіть натуральне число: "))
except ValueError:
    print("Помилка: Будь ласка введіть ціле число.")
    quit()
steps = 0

while c0 != 1:
    print(c0)
    if c0 % 2 == 0:
        c0 = c0 // 2
    else:
        c0 = 3 * c0 + 1
    steps += 1

print(c0)  # Виводимо останнє значення c0, яке буде 1
print("Кількість кроків:", steps)
